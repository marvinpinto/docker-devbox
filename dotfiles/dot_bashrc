# vim: set filetype=sh :

#****************
# Shell options
#****************
# vi mode in bash
set -o vi

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

shopt -s checkwinsize

# Set the correct terminal size
[[ -f "/usr/bin/resize" ]] && eval $(/usr/bin/resize)

# Supercharge directory switching
alias ..="cd .."
complete -d cd
shopt -s cdspell

# Disable accidental Ctrl+s presses
if [[ -t 0 && $- = *i* ]]; then
  stty -ixon
fi

#***************
# Bash Exports
#***************

# Make nvim the default editor
export EDITOR="nvim"

# Larger bash history
export HISTSIZE=2000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
# Make some commands not show up in history
export HISTIGNORE="ls:cd:cd -:pwd:exit:date"

# Prefer US English and use UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

# Don’t clear the screen after quitting a manual page
export MANPAGER="less -X"

# Fancy ls colors
export CLICOLOR='Yes'
export LSCOLORS='ExGxCxDxBxegedabagacad'

# Prevent 'less' from
export LESS="-i -R"
export LESSHISTFILE='/dev/null'
export LESSHISTSIZE=0

# git prompt related environment variables
export GIT_PS1_SHOWDIRTYSTATE='yes'
export GIT_PS1_SHOWSTASHSTATE='yes'
export GIT_PS1_SHOWUNTRACKEDFILES='yes'

# Use fzf for searching through cheatsheets
export CHEAT_USE_FZF=true

# fzf related tweaks
export FZF_DEFAULT_COMMAND='ag --nocolor -g ""'
export FZF_COMPLETION_TRIGGER=',,'
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# homebrew related
export HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew";
export HOMEBREW_CELLAR="${HOMEBREW_PREFIX}/Cellar";
export HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}/Homebrew";
export HOMEBREW_SHELLENV_PREFIX="${HOMEBREW_PREFIX}";
export MANPATH="${HOMEBREW_PREFIX}/share/man${MANPATH+:$MANPATH}:";
export INFOPATH="${HOMEBREW_PREFIX}/share/info:${INFOPATH:-}";

#***************
# Bash Aliases
#***************

# Colored grep
alias grep="grep --color=auto"

# Use gpg2 by default
alias gpg="/usr/bin/gpg2"

# List all files colorized in long format
alias l="ls -lF --color"

# List all files colorized in long format, including dot files
alias la="ls -laF --color"

# List only directories
alias lsd="ls -lF --color | grep --color=never '^d'"

# Always use color output for `ls`
alias ls="ls --color"

# List and kill off tmux sessions
alias tls='/usr/bin/tmux ls'
alias tks='/usr/bin/tmux kill-session -t '

# Docker related aliases
alias drm="docker rm -f"
alias dps="docker ps"

# Command line weather
alias weather="curl http://wttr.in/M6P?1n"

# System Update
alias yoloupdate="sudo apt-get clean && sudo apt-get autoremove -y --purge && sudo apt-get update && sudo apt-get -y dist-upgrade"

# Alias docker-compose to dc
alias dc="docker-compose"

# Copying/moving a large number of files (with progress)
alias rscp='rsync -aP'
alias rsmv='rsync -aP --remove-source-files'

# Alias vi and vim to nvim
alias vi="nvim"
alias vim="nvim"

#************
# SSH agent
#************
if [ -f "${HOME}/.ssh/ssh-agent-info" ]; then
  . "${HOME}/.ssh/ssh-agent-info"
  if [ -f '/.dockerenv' ]; then
    # We're inside a docker environment
    SSH_AUTH_SOCK=/ssh-agent
  fi
  export SSH_AUTH_SOCK
  export SSH_AGENT_PID
fi

#*****************
# Bash Completion
#*****************
if [[ -d "/home/linuxbrew/.linuxbrew/etc/bash_completion.d" ]]; then
  for bcfile in /home/linuxbrew/.linuxbrew/etc/bash_completion.d/* ; do
    [[ -f "$bcfile" ]] && . $bcfile
  done
fi

#************
# NVM setup
#************
export NVM_DIR=/usr/local/nvm
[[ -s "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh" ]] && source "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh"
[ -s "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm" ] && source "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm"
if [[ "$(command -v nvm)" ]] && [[ -f '.nvmrc' ]]; then
  # If there's a .nvmrc file present issue a `nvm use` and automatically
  # use that nodejs version.
  nvm use
fi

#**************
# Bash Prompt
#**************
function __prompt_command() {
  local EXIT="$?"
  PS1=""

  local RED="\[$(tput setaf 1)\]"
  local GREEN="\[$(tput setaf 2)\]"
  local YELLOW="\[$(tput setaf 3)\]"
  local BLUE="\[$(tput setaf 4)\]"
  local MAGENTA="\[$(tput setaf 5)\]"
  local CYAN="\[$(tput setaf 6)\]"
  local WHITE="\[$(tput setaf 7)\]"
  local BOLD="\[$(tput bold)\]"
  local UNDERLINE="\[$(tput sgr 0 1)\]"
  local RESET="\[$(tput sgr0)\]"
  local PROMPTCOL="${YELLOW}"

  if [[ -n "${IS_ELEVATED}" ]]; then
    # Bright red prompt if in an elevated docker container
    PS1+="\n${RED}"
  elif [ -f '/.dockerenv' ]; then
    # We're inside a docker environment
    PS1+="\n${GREEN}"
  elif [ `id -u` == 0 ]; then
    # Bright red prompt if root
    PS1+="\n${RED}"
  else
    PS1+="\n${PROMPTCOL}"
  fi

  # Second line of bash prompt
  if [ -f '/.dockerinit' ]; then
    # We're inside a docker environment
    PS1+="[docker-\H: \t]${RESET}${BLUE}$(__git_ps1 ' [%s]')${RESET}${PROMPTCOL} \w${RESET}\n"
  else
    PS1+="[\H: \t]${RESET}${BLUE}$(__git_ps1 ' [%s]')${RESET}${PROMPTCOL} \w${RESET}\n"
  fi

  # Print out the last exit code, if it wasn't zero
  if [ $EXIT != 0 ]; then
    PS1+="${RED}[${EXIT}]${RESET} "
  fi

  # Finally print out a $ or #, depending on uid
  PS1+="${PROMPTCOL}\\$ ${RESET}"
}

export PROMPT_COMMAND=__prompt_command  # Func to gen PS1 after CMDs

#*******************
# Helper Functions
#*******************

# Load the helper bash function files
for bfile in ~/.bash.d/* ; do
  [[ -f "$bfile" ]] && . "$bfile"
done

# Set the terminal title
function title() {
  echo -ne "\033]0;$1\007"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Function to clean up docker containers
function drma() {
  local dps=$(docker ps -aq)
  if [ -n "$dps" ]; then
    docker rm -f $dps
  fi

  # Delete all untagged docker images
  local untagged=$(docker images | grep "^<none>" | awk "{print $3}")
  if [ -n "$untagged" ]; then
    docker rmi -f $untagged
  fi
}

# helper function to test terminal color output
function colorscheme () {
    # echo ""
    #black
    echo -e "\e[0;30m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 01 0;30m"
    #red
    echo -e "\e[0;31m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 02 0;31m"
    #green
    echo -e "\e[0;32m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 03 0;32m"
    #yellow
    echo -e "\e[0;33m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 04 0;33m"
    #blue
    echo -e "\e[0;34m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 05 0;34m"
    #purple
    echo -e "\e[0;35m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 06 0;35m"
    #cyan
    echo -e "\e[0;36m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 07 0;36m"
    #white
    echo -e "\e[0;37m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 08 0;37m"
    echo ""
    #black
    echo -e "\e[1;30m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 09 1;30m"
    #red
    echo -e "\e[1;31m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 10 1;31m"
    #green
    echo -e "\e[1;32m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 11 1;32m"
    #yellow
    echo -e "\e[1;33m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 12 1;33m"
    #blue
    echo -e "\e[1;34m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 13 1;34m"
    #purple
    echo -e "\e[1;35m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 14 1;35m"
    #cyan
    echo -e "\e[1;36m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 15 1;36m"
    #white
    echo -e "\e[1;37m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 16 1;37m"
    echo ""
    echo -e "\e[0;30m█████\\e[0m\e[0;31m█████\\e[0m\e[0;32m█████\\e[0m\e[0;33m█████\\e[0m\e[0;34m█████\\e[0m\e[0;35m█████\\e[0m\e[0;36m█████\\e[0m\e[0;37m█████\\e[0m"
    echo -e "\e[0m\e[1;30m█████\\e[0m\e[1;31m█████\\e[0m\e[1;32m█████\\e[0m\e[1;33m█████\\e[0m\e[1;34m█████\\e[0m\e[1;35m█████\\e[0m\e[1;36m█████\\e[0m\e[1;37m█████\\e[0m"
}
