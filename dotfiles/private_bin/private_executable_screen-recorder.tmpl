{{ if (and (eq .chezmoi.os "linux") (not .is_devcontainer)) -}}
#!/usr/bin/env bash

# Simtple script to wrap ffmpeg & toggle screencasting
set -o errexit
set -o pipefail

PIDFILE="${HOME}/tmp/screencast.pid"
OUTFILE="${HOME}/tmp/screencast-live.mkv"
FINALFILE="${HOME}/crap/screencast--$(date +'%Y-%m-%d--%H-%M-%S').mkv"

# check if this script is already running
if [[ -s $PIDFILE ]] && [[ -d "/proc/$(cat $PIDFILE)" ]]; then
  # stop the recording & clean up
  kill $(cat $PIDFILE)
  rm -f $PIDFILE
  mv $OUTFILE $FINALFILE
else
  # SCREENRES=$(xrandr -q --current | grep '*' | awk '{print$1}')

  # write to the pidfile
  echo $$ > $PIDFILE &&

  # NOTE: for the -i option - e.g. :0.0+25,100 => offset x by +25, y by +100
  # pixels. Useful utilities:
  # xwininfo
  # xdotool getmouselocation --shell
  # pactl list short sources
  # See "stadia" cheatsheet for setup instructions

  GAME_AUDIO=$(pactl list sources short | grep "game-audio-recording" | cut -f1)
  GAME_VOICE=$(pactl list sources short | grep "game-voice-recording" | cut -f1)

  # let the recording process take over this pid
  rm -f ${OUTFILE}
  exec ffmpeg \
    -f x11grab -s 1916x952 -framerate 30 -i ':0.0+0,91' \
    -f pulse -i $GAME_AUDIO \
    -f pulse -i $GAME_VOICE \
    -map 0 \
    -map 1 \
    -map 2 \
    -ac 2 -acodec aac -b:a 128k \
    -filter:v "scale=1280:-1" -vcodec libx264 -crf 18 -preset ultrafast \
    ${OUTFILE}

fi
{{ end -}}
