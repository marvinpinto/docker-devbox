# vim: set filetype=sh :

#****************
# Shell options
#****************
# vi mode in bash
set -o vi

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

shopt -s checkwinsize

# Set the correct terminal size
[[ -f "/usr/bin/resize" ]] && eval $(/usr/bin/resize)

# Supercharge directory switching
alias ..="cd .."
complete -d cd
shopt -s cdspell

# Disable accidental Ctrl+s presses
if [[ -t 0 && $- = *i* ]]; then
  stty -ixon
fi

#***************
# Bash Exports
#***************

# Make nvim the default editor
export EDITOR="nvim"

# Larger bash history
export HISTSIZE=2000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
# Make some commands not show up in history
export HISTIGNORE="ls:cd:cd -:pwd:exit:date"

# Prefer US English and use UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

# Donâ€™t clear the screen after quitting a manual page
export MANPAGER="less -X"

# Fancy ls colors
# NOTE: these only apply to osx and are not actually being used, since I'm using coreutils on osx
export CLICOLOR=1
export LSCOLORS="ExGxCxDxBxegedabagacad"

# Standardize on ls colored output
export LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:"

# Prevent 'less' from
export LESS="-i -R"
export LESSHISTFILE='/dev/null'
export LESSHISTSIZE=0

# Disable the "log" function in less using a lesskey input file. This was
# previously compiled directly using the lesskey binary, but newer versions of
# less are able to read the lesskey input file directly.
export LESSKEYIN="~/.lesskey"

# git prompt related environment variables
export GIT_PS1_SHOWDIRTYSTATE='yes'
export GIT_PS1_SHOWSTASHSTATE='yes'
export GIT_PS1_SHOWUNTRACKEDFILES='yes'

# Use fzf for searching through cheatsheets
export CHEAT_USE_FZF=true

# fzf related tweaks
export FZF_DEFAULT_COMMAND='ag --nocolor -g ""'
export FZF_COMPLETION_TRIGGER=',,'
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# homebrew related
{{ if (and (eq .chezmoi.os "darwin") (eq .chezmoi.arch "amd64")) }}
export HOMEBREW_PREFIX="/usr/local";
{{ else if (eq .chezmoi.os "linux") }}
export HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew";
{{ end }}
export HOMEBREW_CELLAR="${HOMEBREW_PREFIX}/Cellar";
export HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}/Homebrew";
export HOMEBREW_SHELLENV_PREFIX="${HOMEBREW_PREFIX}";
export MANPATH="${HOMEBREW_PREFIX}/opt/coreutils/libexec/gnuman:${HOMEBREW_PREFIX}/share/man${MANPATH+:$MANPATH}:";
export INFOPATH="${HOMEBREW_PREFIX}/opt/coreutils/share/info:${HOMEBREW_PREFIX}/share/info:${INFOPATH:-}";

#***************
# Bash Aliases
#***************

# Colored grep
alias grep="grep --color=auto"

# Use gpg2 by default
alias gpg="/usr/bin/gpg2"

# Colored ls helpers
alias l="ls -lF --color"
alias la="ls -laF --color"
alias lsd="ls -lF --color | grep --color=never '^d'"
alias ls="ls --color"

# Docker related aliases
alias drm="docker rm -f"
alias dps="docker ps"

# Command line weather
alias weather="curl http://wttr.in/M6P?1n"

{{ if (and (eq .chezmoi.os "linux") (not .is_devcontainer) (not .is_remote_server)) }}
# System Update
alias yoloupdate="sudo apt-get clean && sudo apt-get autoremove -y --purge && sudo apt-get update && sudo apt-get -y dist-upgrade && brew update && brew upgrade"
{{ else if (and (eq .chezmoi.os "linux") (.is_remote_server)) }}
# System Update
alias yoloupdate="sudo apt-get clean && sudo apt-get autoremove -y --purge && sudo apt-get update && sudo apt-get -y dist-upgrade"
{{ else if (eq .chezmoi.os "darwin") }}
# System Update
alias yoloupdate="sudo softwareupdate --install --all --agree-to-license && brew update && brew upgrade"
{{ end }}

# Alias docker-compose to dc
alias dc="docker-compose"

# Copying/moving a large number of files (with progress)
alias rscp='rsync -aP'
alias rsmv='rsync -aP --remove-source-files'

# Alias vi and vim to nvim
alias vi="nvim"
alias vim="nvim"

#************
# SSH agent
#************
if [ -f "${HOME}/.ssh/ssh-agent-info" ]; then
  . "${HOME}/.ssh/ssh-agent-info"
  if [ -f '/.dockerenv' ]; then
    # We're inside a docker environment
    SSH_AUTH_SOCK=/ssh-agent
  fi
  export SSH_AUTH_SOCK
  export SSH_AGENT_PID
fi

#*****************
# Bash Completion
#*****************
[[ -e "/etc/bash_completion" ]] && source "/etc/bash_completion"
if [[ -d "${HOMEBREW_PREFIX}/etc/bash_completion.d" ]]; then
  for bcfile in ${HOMEBREW_PREFIX}/etc/bash_completion.d/* ; do
    [[ -f "$bcfile" ]] && . $bcfile
  done
fi
[[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]] && source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
[[ -r "${HOMEBREW_PREFIX}/opt/fzf/shell/completion.bash" ]] && source "${HOMEBREW_PREFIX}/opt/fzf/shell/completion.bash"
[[ -r "${HOMEBREW_PREFIX}/opt/fzf/shell/key-bindings.bash" ]] && source "${HOMEBREW_PREFIX}/opt/fzf/shell/key-bindings.bash"

#************
# NVM setup
#************
export NVM_DIR=/usr/local/nvm
[[ -s "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" ]] && source "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh"
[ -s "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm" ] && source "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm"
if [[ "$(command -v nvm)" ]] && [[ -f '.nvmrc' ]]; then
  # If there's a .nvmrc file present issue a `nvm use` and automatically
  # use that nodejs version.
  nvm use
fi

#**************
# Bash Prompt
#**************
function __prompt_command() {
  local EXIT="$?"
  PS1=""

  local RED="\[$(tput setaf 1)\]"
  local GREEN="\[$(tput setaf 2)\]"
  local YELLOW="\[$(tput setaf 3)\]"
  local BLUE="\[$(tput setaf 4)\]"
  local MAGENTA="\[$(tput setaf 5)\]"
  local CYAN="\[$(tput setaf 6)\]"
  local WHITE="\[$(tput setaf 7)\]"
  local BOLD="\[$(tput bold)\]"
  local UNDERLINE="\[$(tput sgr 0 1)\]"
  local RESET="\[$(tput sgr0)\]"

  {{ if (.is_devcontainer) }}
  local PROMPTCOL="${GREEN}"
  {{ else if (.is_remote_server) }}
  local PROMPTCOL="${BLUE}"
  {{ else }}
  local PROMPTCOL="${YELLOW}"
  {{ end }}

  if [[ -n "${IS_ELEVATED}" ]]; then
    # Bright red prompt if in an elevated docker container
    PS1+="\n${RED}"
  elif [ -f '/.dockerenv' ]; then
    # We're inside a docker environment
    PS1+="\n${PROMPTCOL}"
  elif [ `id -u` == 0 ]; then
    # Bright red prompt if root
    PS1+="\n${RED}"
  else
    PS1+="\n${PROMPTCOL}"
  fi

  # Second line of bash prompt
  if [ -f '/.dockerenv' ]; then
    # We're inside a docker environment
    PS1+="[docker-\$HOSTNAME: \t]${RESET}${BLUE}$(__git_ps1 ' [%s]')${RESET}${PROMPTCOL} \w${RESET}\n"
  else
    PS1+="[\H: \t]${RESET}${BLUE}$(__git_ps1 ' [%s]')${RESET}${PROMPTCOL} \w${RESET}\n"
  fi

  # Print out the last exit code, if it wasn't zero
  if [ $EXIT != 0 ]; then
    PS1+="${RED}[${EXIT}]${RESET} "
  fi

  # Finally print out a $ or #, depending on uid
  PS1+="${PROMPTCOL}\\$ ${RESET}"
}

export PROMPT_COMMAND=__prompt_command  # Func to gen PS1 after CMDs

#*******************
# Helper Functions
#*******************

# Load the helper bash function files
for bfile in ~/.bash.d/* ; do
  [[ -f "$bfile" ]] && . "$bfile"
done

# Set the terminal title
function title() {
  echo -ne "\033]0;$1\007"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Function to clean up docker containers
function drma() {
  local dps=$(docker ps -aq)
  if [ -n "$dps" ]; then
    docker rm -f $dps
  fi

  # Delete all untagged docker images
  local untagged=$(docker images | grep "^<none>" | awk "{print $3}")
  if [ -n "$untagged" ]; then
    docker rmi -f $untagged
  fi
}
